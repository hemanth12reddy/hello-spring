# Create a Github Actions (GHA) pipeline to do the following (use triggers 
# so that pipeline can run manually, on push to the branch and whenever 
# there is a pull request raised to main branch):

name: yml file for java hello - spring app

on:
    workflow_dispatch:
jobs:
    checkoutapp: 
        runs-on: ubuntu-latest
        steps:
# 1. Checking out the git repository (using third party actions)
        - name: checkout repository
          uses: actions/checkout@v3
          
        - name: installing the maven
          uses: yuzhiyongcn/setup-maven@v1.0.0
          with:
            maven-version: 3.8.2


# 2. Build and test (build step should execute first) the java code
        - name: building app
          run: mvn clean package
              
        - name : printing files and work dir 
          run : |
              echo "workd path"
              pwd
              echo "work dir files : "
              ls -a
              ls -a target

        - name: unit test for app
          run: mvn clean test

# 3. Upload the artifacts (using third party actions)(to another branch named artefacts-store ) from build step for persistence.
        - name: Upload GitHub Pages artifact
          uses: actions/upload-pages-artifact@v2.0.0
          with:
            name: hello-0.0.1-SNAPSHOT.jar
            path: ./target
            retention-days: 1
                    
        - name: Download a Build Artifact
          uses: actions/download-artifact@v2.1.1
          with:
            # Artifact name
            name: my-artifact# optional
            # Destination path
            path: ./artifacts # optional
                  
        - name: switching to artefacts-store
          run: |
              git checkout artefacts-store
              git add ./artifacts
              git commit -m "added artifacts"
              git push origin artefacts-store
              echo "pushed to artefacts store"
    
    
    
    
    
    result:
        runs-on: ubuntu-latest
        needs: [checkoutapp]
        steps:
            - name: result
              run: echo "built successfully"

# 4. Create another pipeline, this pipeline will be triggered by the previous pipeline only and 
# download the artifact(using third party actions). Use the appropriate triggers.
    
#     Note: Set GHA env variables for adding the artefacts in another branch using git add, commit, push under your name and email.
    
#     Then if you are done with the docker do the following:
